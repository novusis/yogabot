import asyncio
import logging
import os
from typing import Dict, List, Optional
from dataclasses import dataclass, field
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# ID –∏ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ—ã
ADMIN_ID = os.getenv("ADMIN_ID")
ADMIN_NAMES = os.getenv("ADMIN_USERNAMES", "")

@dataclass
class YogaClass:
    name: str
    max_participants: int
    registrations: Dict[int, int] = field(default_factory=dict)  # user_id: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

@dataclass
class BotData:
    schedule: List[YogaClass] = field(default_factory=list)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
bot_data = BotData()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    waiting_class_name = State()
    waiting_class_capacity = State()
    waiting_broadcast_message = State()
    waiting_reorder_index = State()

class BotStates(StatesGroup):
    main_menu = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

def get_main_keyboard(admin) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = [
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")],
        [InlineKeyboardButton(text="üìù –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="my_registration")]
    ]

    if admin:
        buttons.extend([
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", callback_data="admin_view_registrations")],
            [InlineKeyboardButton(text="‚öôÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_manage_schedule")]
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_schedule_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏"""
    if not bot_data.schedule:
        return None

    buttons = []
    for i, yoga_class in enumerate(bot_data.schedule):
        total_registered = sum(yoga_class.registrations.values())
        available = yoga_class.max_participants - total_registered
        if available > 0:
            text = f"{yoga_class.name} (—Å–≤–æ–±–æ–¥–Ω–æ: {available})"
            buttons.append([InlineKeyboardButton(text=text, callback_data=f"register_{i}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

def get_my_registrations_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = []
    for i, yoga_class in enumerate(bot_data.schedule):
        if user_id in yoga_class.registrations and yoga_class.registrations[user_id] > 0:
            count = yoga_class.registrations[user_id]
            text = f"{yoga_class.name} ({count} —á–µ–ª.)"
            buttons.append([InlineKeyboardButton(text=text, callback_data=f"my_class_{i}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

def get_admin_schedule_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="admin_add_class")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="admin_delete_class")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∑–∞–Ω—è—Ç–∏–π", callback_data="admin_reorder")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_delete_schedule")],
        [InlineKeyboardButton(text="üì¢ –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å!", callback_data="admin_broadcast")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.set_state(BotStates.main_menu)
    keyboard = get_main_keyboard(check_admin(message.from_user))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –π–æ–≥—É! üßò‚Äç‚ôÄÔ∏è", reply_markup=keyboard)

@dp.callback_query(F.data == "schedule")
async def schedule_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    keyboard = get_schedule_keyboard()
    if keyboard:
        text = "–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞ –∫–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è..."
        main_keyboard = get_main_keyboard(check_admin(callback.from_user))
        await callback.message.edit_text(text, reply_markup=main_keyboard)

@dp.callback_query(F.data.startswith("register_"))
async def register_handler(callback: CallbackQuery):
    """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"""
    class_index = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    yoga_class = bot_data.schedule[class_index]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
    total_registered = sum(yoga_class.registrations.values())
    if total_registered >= yoga_class.max_participants:
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã!", show_alert=True)
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in yoga_class.registrations:
        yoga_class.registrations[user_id] = 0
    yoga_class.registrations[user_id] += 1

    count = yoga_class.registrations[user_id]
    text = f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {yoga_class.name}!\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}"

    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_participant_{class_index}")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ", callback_data="schedule")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("add_participant_"))
async def add_participant_handler(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    class_index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    yoga_class = bot_data.schedule[class_index]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
    total_registered = sum(yoga_class.registrations.values())
    if total_registered >= yoga_class.max_participants:
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã!", show_alert=True)
        return

    yoga_class.registrations[user_id] += 1
    count = yoga_class.registrations[user_id]

    text = f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏ {count} —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ {yoga_class.name}"

    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_participant_{class_index}")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ", callback_data="schedule")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "my_registration")
async def my_registration_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏"""
    keyboard = get_my_registrations_keyboard(callback.from_user.id)
    if keyboard:
        text = "–°–µ–π—á–∞—Å –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:"
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
        main_keyboard = get_main_keyboard(check_admin(callback.from_user))
        await callback.message.edit_text(text, reply_markup=main_keyboard)

@dp.callback_query(F.data.startswith("my_class_"))
async def my_class_handler(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é"""
    class_index = int(callback.data.split("_")[2])
    yoga_class = bot_data.schedule[class_index]
    user_id = callback.from_user.id

    count = yoga_class.registrations.get(user_id, 0)
    text = f"{yoga_class.name}\n–í–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}"

    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_participant_{class_index}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"delete_registration_{class_index}")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("delete_registration_"))
async def delete_registration_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"""
    class_index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    yoga_class = bot_data.schedule[class_index]

    count = yoga_class.registrations.get(user_id, 0)

    if count == 1:
        # –£–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫
        del yoga_class.registrations[user_id]
        text = f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {yoga_class.name} —É–¥–∞–ª–µ–Ω–∞."
        main_keyboard = get_main_keyboard(check_admin(callback.from_user))
        await callback.message.edit_text(text, reply_markup=main_keyboard)
    elif count > 1:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        text = f"–ù–∞ {yoga_class.name} –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?"
        buttons = [
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö", callback_data=f"delete_all_{class_index}")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"delete_one_{class_index}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="my_registration")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("delete_all_"))
async def delete_all_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    class_index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    yoga_class = bot_data.schedule[class_index]

    del yoga_class.registrations[user_id]
    text = f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ {yoga_class.name} —É–¥–∞–ª–µ–Ω—ã."
    main_keyboard = get_main_keyboard(check_admin(callback.from_user))
    await callback.message.edit_text(text, reply_markup=main_keyboard)

@dp.callback_query(F.data.startswith("delete_one_"))
async def delete_one_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    class_index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    yoga_class = bot_data.schedule[class_index]

    yoga_class.registrations[user_id] -= 1
    if yoga_class.registrations[user_id] <= 0:
        del yoga_class.registrations[user_id]

    text = f"–û–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ {yoga_class.name}."
    main_keyboard = get_main_keyboard(check_admin(callback.from_user))
    await callback.message.edit_text(text, reply_markup=main_keyboard)

# –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò

def check_admin(from_user):
    return from_user.id == ADMIN_ID or from_user.username in ADMIN_NAMES


@dp.callback_query(F.data == "admin_view_registrations")
async def admin_view_registrations(callback: CallbackQuery):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not check_admin(callback.from_user):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    if not bot_data.schedule:
        text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."
    else:
        text = "–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
        for yoga_class in bot_data.schedule:
            if yoga_class.registrations:
                text += f"üìÖ {yoga_class.name}:\n"
                for user_id, count in yoga_class.registrations.items():
                    try:
                        user = await bot.get_chat(user_id)
                        name = user.first_name or f"ID{user_id}"
                        if count > 1:
                            name += f" +{count-1}"
                        text += f"  ‚Ä¢ {name}\n"
                    except:
                        text += f"  ‚Ä¢ ID{user_id} ({count} —á–µ–ª.)\n"
                text += "\n"

    main_keyboard = get_main_keyboard(check_admin(callback.from_user))
    await callback.message.edit_text(text, reply_markup=main_keyboard)

@dp.callback_query(F.data == "admin_manage_schedule")
async def admin_manage_schedule(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not check_admin(callback.from_user):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    text = "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    keyboard = get_admin_schedule_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "admin_add_class")
async def admin_add_class(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"""
    if not check_admin(callback.from_user):
        return

    await state.set_state(AdminStates.waiting_class_name)
    text = "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ?"
    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "cancel_creation")
async def cancel_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"""
    await state.clear()
    keyboard = get_admin_schedule_keyboard()
    text = "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.message(StateFilter(AdminStates.waiting_class_name))
async def process_class_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    if not message.text or message.text.strip() == "":
        text = "–û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"
        buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
        return

    await state.update_data(class_name=message.text.strip())
    await state.set_state(AdminStates.waiting_class_capacity)

    text = "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:"
    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard)

@dp.message(StateFilter(AdminStates.waiting_class_capacity))
async def process_class_capacity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç"""
    try:
        capacity = int(message.text)
        if capacity <= 0:
            raise ValueError()
    except (ValueError, TypeError):
        text = "–û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ –º–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–Ω—è—Ç–∏—è?"
        buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
        return

    data = await state.get_data()
    class_name = data['class_name']

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
    new_class = YogaClass(name=class_name, max_participants=capacity)
    bot_data.schedule.append(new_class)

    await state.clear()

    text = f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞–Ω—è—Ç–∏–µ {class_name} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç {capacity}."
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ", callback_data="admin_add_class")],
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_manage_schedule")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "admin_delete_class")
async def admin_delete_class(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"""
    if not check_admin(callback.from_user):
        return

    if not bot_data.schedule:
        text = "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        keyboard = get_admin_schedule_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        return

    text = "–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?"
    buttons = []
    for i, yoga_class in enumerate(bot_data.schedule):
        buttons.append([InlineKeyboardButton(text=yoga_class.name, callback_data=f"confirm_delete_{i}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_class(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"""
    class_index = int(callback.data.split("_")[2])
    yoga_class = bot_data.schedule[class_index]

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ
    for user_id in yoga_class.registrations.keys():
        try:
            text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞–Ω—è—Ç–∏–µ {yoga_class.name} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è..."
            buttons = [[InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(user_id, text, reply_markup=keyboard)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

    # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ
    bot_data.schedule.pop(class_index)

    text = f"–ó–∞–Ω—è—Ç–∏–µ {yoga_class.name} —É–¥–∞–ª–µ–Ω–æ. –£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
    keyboard = get_admin_schedule_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "admin_delete_schedule")
async def admin_delete_schedule(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    if not check_admin(callback.from_user):
        return

    text = "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete_all")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="admin_manage_schedule")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "confirm_delete_all")
async def confirm_delete_all_schedule(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    bot_data.schedule.clear()
    text = "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
    keyboard = get_admin_schedule_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not check_admin(callback.from_user):
        return

    await state.set_state(AdminStates.waiting_broadcast_message)
    text = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤:"
    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    await state.clear()
    keyboard = get_admin_schedule_keyboard()
    text = "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.message(StateFilter(AdminStates.waiting_broadcast_message))
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = set()
    for yoga_class in bot_data.schedule:
        all_users.update(yoga_class.registrations.keys())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º
    sent_count = 0
    for user_id in all_users:
        try:
            await bot.send_message(user_id, broadcast_text)
            sent_count += 1
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

    await state.clear()

    text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
    keyboard = get_admin_schedule_keyboard()
    await message.answer(text, reply_markup=keyboard)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())