import asyncio
import logging
import os
import sqlite3
from typing import Dict, List, Optional, Tuple
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

from dotenv import load_dotenv

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
VERSION = "v0.3"
BOT_TOKEN = os.getenv("BOT_TOKEN")
TEACHER = os.getenv("TEACHER")

# ID –∏ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_ID = int(os.getenv("ADMIN_ID")) if os.getenv("ADMIN_ID") else None
ADMIN_NAMES = os.getenv("ADMIN_USERNAMES", "").split(",") if os.getenv("ADMIN_USERNAMES") else []

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "db/yoga_bot.db"


class DatabaseManager:
    def __init__(self, db_path: str = DB_PATH):
        self.db_path = db_path
        print(f"DatabaseManager.__init__ db_path <{db_path}>")
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        # os.makedirs(os.path.dirname(db_path), exist_ok=True)
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–Ω—è—Ç–∏–π
            cursor.execute('''
                           CREATE TABLE IF NOT EXISTS yoga_classes
                           (
                               id
                               INTEGER
                               PRIMARY
                               KEY
                               AUTOINCREMENT,
                               name
                               TEXT
                               NOT
                               NULL,
                               max_participants
                               INTEGER
                               NOT
                               NULL,
                               created_at
                               TIMESTAMP
                               DEFAULT
                               CURRENT_TIMESTAMP
                           )
                           ''')

            # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
            cursor.execute('''
                           CREATE TABLE IF NOT EXISTS registrations
                           (
                               id
                               INTEGER
                               PRIMARY
                               KEY
                               AUTOINCREMENT,
                               user_id
                               INTEGER
                               NOT
                               NULL,
                               class_id
                               INTEGER
                               NOT
                               NULL,
                               participant_count
                               INTEGER
                               DEFAULT
                               1,
                               created_at
                               TIMESTAMP
                               DEFAULT
                               CURRENT_TIMESTAMP,
                               FOREIGN
                               KEY
                           (
                               class_id
                           ) REFERENCES yoga_classes
                           (
                               id
                           ) ON DELETE CASCADE
                               )
                           ''')

            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            cursor.execute('''
                           CREATE TABLE IF NOT EXISTS settings
                           (
                               key
                               TEXT
                               PRIMARY
                               KEY,
                               value
                               TEXT
                               NOT
                               NULL
                           )
                           ''')

            conn.commit()

    def get_start_description(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT value FROM settings WHERE key = 'start_description'")
            result = cursor.fetchone()

            if result:
                return result[0]
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return ("üåø –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–ª–µ–Ω–∞ –õ–∞–∑–∞—Ä–µ–≤–∞ ‚Äî —è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ô–æ–≥–∏ –ê–π–µ–Ω–≥–∞—Ä–∞ üßò‚Äç‚ôÄÔ∏è\n"
                        "–ë—É–¥—É —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –º–æ–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö üôè‚ú®")

    def set_start_description(self, description: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT OR REPLACE INTO settings (key, value) VALUES ('start_description', ?)",
                (description,)
            )
            conn.commit()

    def add_yoga_class(self, name: str, max_participants: int) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO yoga_classes (name, max_participants) VALUES (?, ?)",
                (name, max_participants)
            )
            conn.commit()
            return cursor.lastrowid

    def get_yoga_classes(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, name, max_participants FROM yoga_classes ORDER BY id")
            columns = [description[0] for description in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def delete_yoga_class(self, class_id: int):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM yoga_classes WHERE id = ?", (class_id,))
            conn.commit()

    def clear_all_classes(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM yoga_classes")
            cursor.execute("DELETE FROM registrations")
            conn.commit()

    def register_user(self, user_id: int, class_id: int, participant_count: int = 1):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
            cursor.execute(
                "SELECT participant_count FROM registrations WHERE user_id = ? AND class_id = ?",
                (user_id, class_id)
            )
            existing = cursor.fetchone()

            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                new_count = existing[0] + participant_count
                cursor.execute(
                    "UPDATE registrations SET participant_count = ? WHERE user_id = ? AND class_id = ?",
                    (new_count, user_id, class_id)
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(
                    "INSERT INTO registrations (user_id, class_id, participant_count) VALUES (?, ?, ?)",
                    (user_id, class_id, participant_count)
                )
            conn.commit()

    def get_user_registrations(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                           SELECT r.class_id, yc.name, r.participant_count
                           FROM registrations r
                                    JOIN yoga_classes yc ON r.class_id = yc.id
                           WHERE r.user_id = ?
                           ORDER BY yc.id
                           """, (user_id,))
            columns = ['class_id', 'name', 'participant_count']
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_class_registrations(self, class_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT user_id, participant_count FROM registrations WHERE class_id = ?",
                (class_id,)
            )
            columns = ['user_id', 'participant_count']
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_all_registrations(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                           SELECT yc.name, r.user_id, r.participant_count
                           FROM registrations r
                                    JOIN yoga_classes yc ON r.class_id = yc.id
                           ORDER BY yc.id, r.user_id
                           """)
            columns = ['class_name', 'user_id', 'participant_count']
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def delete_user_registration(self, user_id: int, class_id: int, all_participants: bool = False):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            if all_participants:
                # –£–¥–∞–ª—è–µ–º –≤—Å—é –∑–∞–ø–∏—Å—å
                cursor.execute(
                    "DELETE FROM registrations WHERE user_id = ? AND class_id = ?",
                    (user_id, class_id)
                )
            else:
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ 1
                cursor.execute(
                    "SELECT participant_count FROM registrations WHERE user_id = ? AND class_id = ?",
                    (user_id, class_id)
                )
                current_count = cursor.fetchone()

                if current_count and current_count[0] > 1:
                    cursor.execute(
                        "UPDATE registrations SET participant_count = participant_count - 1 WHERE user_id = ? AND class_id = ?",
                        (user_id, class_id)
                    )
                else:
                    cursor.execute(
                        "DELETE FROM registrations WHERE user_id = ? AND class_id = ?",
                        (user_id, class_id)
                    )
            conn.commit()

    def get_registered_users_for_class(self, class_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT user_id FROM registrations WHERE class_id = ?", (class_id,))
            return [row[0] for row in cursor.fetchall()]

    def get_all_registered_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT user_id FROM registrations")
            return [row[0] for row in cursor.fetchall()]

    def get_total_participants(self, class_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT COALESCE(SUM(participant_count), 0) FROM registrations WHERE class_id = ?",
                (class_id,)
            )
            return cursor.fetchone()[0]

    def get_all_yoga_classes(self) -> List[Tuple[int, str, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è —Å –∏—Ö ID, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, name, max_participants FROM yoga_classes ORDER BY id"
            )
            return cursor.fetchall()

    def get_total_registrations_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö)"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM registrations")
            result = cursor.fetchone()
            return result[0] if result else 0

    def update_class_order(self, class_id: int, new_position: int) -> bool:
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∑–∞–Ω—è—Ç–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è
            cursor.execute("SELECT id FROM yoga_classes ORDER BY id")
            all_classes = cursor.fetchall()

            if not all_classes:
                return False

            class_ids = [cls[0] for cls in all_classes]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–Ω—è—Ç–∏–µ
            if class_id not in class_ids:
                return False

            # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            class_ids.remove(class_id)

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            new_position = min(new_position, len(class_ids))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
            class_ids.insert(new_position, class_id)

            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("""
                        CREATE TEMPORARY TABLE temp_classes AS 
                        SELECT * FROM yoga_classes
                    """)

                cursor.execute("""
                        CREATE TEMPORARY TABLE temp_registrations AS 
                        SELECT * FROM registrations
                    """)

                # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute("DELETE FROM registrations")
                cursor.execute("DELETE FROM yoga_classes")

                # –°–æ–∑–¥–∞–µ–º mapping —Å—Ç–∞—Ä—ã—Ö ID –∫ –Ω–æ–≤—ã–º ID
                id_mapping = {}

                # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–∏—è –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ —Å–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
                for new_id, old_id in enumerate(class_ids, 1):
                    cursor.execute("""
                                   INSERT INTO yoga_classes (id, name, max_participants)
                                   SELECT ?, name, max_participants
                                   FROM temp_classes
                                   WHERE id = ?
                                   """, (new_id, old_id))
                    id_mapping[old_id] = new_id

                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ ID –∑–∞–Ω—è—Ç–∏–π
                cursor.execute("SELECT user_id, class_id, participant_count FROM temp_registrations")
                old_registrations = cursor.fetchall()

                for user_id, old_class_id, participant_count in old_registrations:
                    new_class_id = id_mapping[old_class_id]
                    cursor.execute("""
                                   INSERT INTO registrations (user_id, class_id, participant_count)
                                   VALUES (?, ?, ?)
                                   """, (user_id, new_class_id, participant_count))

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute("DROP TABLE temp_classes")
                cursor.execute("DROP TABLE temp_registrations")

                conn.commit()
                return True

            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                conn.rollback()
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                try:
                    cursor.execute("DROP TABLE IF EXISTS temp_classes")
                    cursor.execute("DROP TABLE IF EXISTS temp_registrations")
                except:
                    pass
                return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    waiting_class_name = State()
    waiting_class_capacity = State()
    waiting_broadcast_message = State()
    waiting_start_description = State()
    waiting_reorder_position = State()


class BotStates(StatesGroup):
    main_menu = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


def check_admin(from_user):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if ADMIN_ID and from_user.id == ADMIN_ID:
        return True
    if ADMIN_NAMES and from_user.username in ADMIN_NAMES:
        return True
    return False


def get_main_keyboard(admin) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = [
        [InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")],
        [InlineKeyboardButton(text="üï∞ –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="my_registration")]
    ]

    if admin:
        buttons.extend([
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", callback_data="admin_view_registrations")],
            [InlineKeyboardButton(text="‚öôÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_manage_schedule")]
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_schedule_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏"""
    classes = db.get_yoga_classes()

    if not classes:
        return None

    buttons = []
    for yoga_class in classes:
        total_registered = db.get_total_participants(yoga_class['id'])
        available = yoga_class['max_participants'] - total_registered
        text = f"{yoga_class['name']} (–Ω–µ—Ç –º–µ—Å—Ç)"
        if available > 0:
            text = f"{yoga_class['name']} (—Å–≤–æ–±–æ–¥–Ω–æ: {available})"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"register_{yoga_class['id']}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None


def get_my_registrations_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    registrations = db.get_user_registrations(user_id)

    if not registrations:
        return None

    buttons = []
    for reg in registrations:
        text = f"{reg['name']} ({reg['participant_count']} —á–µ–ª.)"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"my_class_{reg['class_id']}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_admin_schedule_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="admin_add_class")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="admin_delete_class")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="admin_reorder_classes")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_delete_schedule")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_edit_description")],  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        [InlineKeyboardButton(text="üì¢ –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å!", callback_data="admin_broadcast")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_system_keyboard() -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üï∞ –ú–æ—è –∑–∞–ø–∏—Å—å")],
            [KeyboardButton(text="üåê –û —É—á–∏—Ç–µ–ª–µ")]
        ],
        resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
    )


@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.set_state(BotStates.main_menu)
    admin = check_admin(message.from_user)
    keyboard = get_main_keyboard(admin)
    start_answer1 = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –π–æ–≥—É! üßò‚Äç‚ôÄÔ∏è"
    if admin:
        start_answer1 = f"<i>{VERSION} - You Admin </i>üôè\n{start_answer1}"
    await message.answer(start_answer1, reply_markup=get_system_keyboard(), parse_mode="HTML")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    start_answer2 = db.get_start_description()
    await message.answer(
        start_answer2,
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "schedule")
async def schedule_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    keyboard = get_schedule_keyboard()
    if keyboard:
        text = "–ù–∞ –∫–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n<b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>"
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è..."
        main_keyboard = get_main_keyboard(check_admin(callback.from_user))
        await callback.message.edit_text(text, reply_markup=main_keyboard)


# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
@dp.callback_query(F.data == "admin_reorder_classes")
async def show_reorder_classes(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞"""
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è
    classes = db.get_all_yoga_classes()

    if not classes:
        text = "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞."
        buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_schedule")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)
        return

    text = "–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å?\n\n<b>–ó–∞–Ω—è—Ç–∏—è:</b>"
    buttons = []

    for index, (class_id, class_name, max_participants) in enumerate(classes, 1):
        button_text = f"#{index} {class_name}"
        callback_data = f"reorder_class_{class_id}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_schedule")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


# 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("reorder_class_"))
async def select_class_to_reorder(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞"""
    await callback.answer()

    try:
        class_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–Ω—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_reorder_classes")]
            ])
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
    classes = db.get_all_yoga_classes()
    selected_class = None
    current_position = 0

    for index, (cls_id, cls_name, max_participants) in enumerate(classes, 1):
        if cls_id == class_id:
            selected_class = cls_name
            current_position = index
            break

    if not selected_class:
        await callback.message.edit_text(
            "–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_reorder_classes")]
            ])
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        reorder_class_id=class_id,
        reorder_class_name=selected_class,
        current_position=current_position,
        total_classes=len(classes)
    )
    await state.set_state(AdminStates.waiting_reorder_position)

    text = (f"–ó–∞–Ω—è—Ç–∏–µ: <b>{selected_class}</b>\n"
            f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: <b>#{current_position}</b>\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ?\n"
            f"(–æ—Ç 1 –¥–æ {len(classes)})")

    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reorder")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


# 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.message(StateFilter(AdminStates.waiting_reorder_position))
async def process_reorder_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è"""
    try:
        new_position = int(message.text)
        if new_position <= 0:
            raise ValueError("–ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except (ValueError, TypeError):
        data = await state.get_data()
        total_classes = data.get('total_classes', 1)

        text = (f"–û—à–∏–±–∫–∞! –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: –æ—Ç 1 –¥–æ {total_classes}")
        buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reorder")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
        return

    data = await state.get_data()
    class_id = data['reorder_class_id']
    class_name = data['reorder_class_name']
    current_position = data['current_position']
    total_classes = data['total_classes']

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é (–∏–Ω–¥–µ–∫—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
    new_position_index = new_position - 1

    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, —Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
    if new_position > total_classes:
        new_position_index = total_classes - 1
        new_position = total_classes

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
    registrations_before = db.get_total_registrations_count()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.update_class_order(class_id, new_position_index)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    registrations_after = db.get_total_registrations_count()

    await state.clear()

    if success and registrations_before == registrations_after:
        if new_position != current_position:
            text = (f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ <b>{class_name}</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ!\n"
                    f"–°—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è: #{current_position}\n"
                    f"–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: #{new_position}\n"
                    f"–í—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ({registrations_after})")
        else:
            text = f"–ó–∞–Ω—è—Ç–∏–µ <b>{class_name}</b> –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏ #{current_position}"
    elif success and registrations_before != registrations_after:
        text = (f"‚ö†Ô∏è –ó–∞–Ω—è—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π!\n"
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–æ: {registrations_before}, –ø–æ—Å–ª–µ: {registrations_after}")
    else:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è <b>{class_name}</b>"

    buttons = [
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –µ—â–µ", callback_data="admin_reorder_classes")],
        [InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_manage_schedule")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# 7. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
@dp.callback_query(F.data == "cancel_reorder")
async def cancel_reorder(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞"""
    await callback.answer()
    await state.clear()

    text = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    buttons = [
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="admin_reorder_classes")],
        [InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_manage_schedule")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data.startswith("register_"))
async def register_handler(callback: CallbackQuery):
    """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"""
    class_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
    classes = db.get_yoga_classes()
    yoga_class = next((c for c in classes if c['id'] == class_id), None)

    if not yoga_class:
        await callback.answer("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
    total_registered = db.get_total_participants(class_id)
    if total_registered >= yoga_class['max_participants']:
        await callback.message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —É—á–∏—Ç–µ–ª–µ–º –Ω–∞–ø—Ä—è–º—É—é {TEACHER}, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –Ω–∞–π–¥–µ—Ç—Å—è –º–µ—Å—Ç–æ üôè", show_alert=True)
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.register_user(user_id, class_id, 1)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registrations = db.get_user_registrations(user_id)
    user_reg = next((r for r in registrations if r['class_id'] == class_id), None)
    count = user_reg['participant_count'] if user_reg else 1

    text = f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {yoga_class['name']}!\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}"

    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_participant_{class_id}")],
        [InlineKeyboardButton(text="üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ", callback_data="schedule")],
        [InlineKeyboardButton(text="üï∞ –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="my_registration")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data.startswith("add_participant_"))
async def add_participant_handler(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    class_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
    classes = db.get_yoga_classes()
    yoga_class = next((c for c in classes if c['id'] == class_id), None)

    if not yoga_class:
        await callback.answer("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
    total_registered = db.get_total_participants(class_id)
    if total_registered >= yoga_class['max_participants']:
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã!", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    db.register_user(user_id, class_id, 1)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    registrations = db.get_user_registrations(user_id)
    user_reg = next((r for r in registrations if r['class_id'] == class_id), None)
    count = user_reg['participant_count'] if user_reg else 1

    text = f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏ {count} —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ {yoga_class['name']}"

    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_participant_{class_id}")],
        [InlineKeyboardButton(text="üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ", callback_data="schedule")],
        [InlineKeyboardButton(text="üï∞ –ú–æ—è –∑–∞–ø–∏—Å—å", callback_data="my_registration")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "my_registration")
async def my_registration_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏"""
    keyboard = get_my_registrations_keyboard(callback.from_user.id)
    if keyboard:
        text = "–°–µ–π—á–∞—Å –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:"
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
        main_keyboard = get_main_keyboard(check_admin(callback.from_user))
        await callback.message.edit_text(text, reply_markup=main_keyboard)


@dp.callback_query(F.data.startswith("my_class_"))
async def my_class_handler(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é"""
    class_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –∏ –∑–∞–ø–∏—Å–∏
    classes = db.get_yoga_classes()
    yoga_class = next((c for c in classes if c['id'] == class_id), None)

    if not yoga_class:
        await callback.answer("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    registrations = db.get_user_registrations(user_id)
    user_reg = next((r for r in registrations if r['class_id'] == class_id), None)

    if not user_reg:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    count = user_reg['participant_count']
    text = f"{yoga_class['name']}\n–í–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}"

    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_participant_{class_id}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"delete_registration_{class_id}")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data.startswith("delete_registration_"))
async def delete_registration_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"""
    class_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    registrations = db.get_user_registrations(user_id)
    user_reg = next((r for r in registrations if r['class_id'] == class_id), None)

    if not user_reg:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    count = user_reg['participant_count']
    classes = db.get_yoga_classes()
    yoga_class = next((c for c in classes if c['id'] == class_id), None)

    if count == 1:
        # –£–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫
        db.delete_user_registration(user_id, class_id, all_participants=True)
        text = f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {yoga_class['name']} —É–¥–∞–ª–µ–Ω–∞."
        main_keyboard = get_main_keyboard(check_admin(callback.from_user))
        await callback.message.edit_text(text, reply_markup=main_keyboard)
    elif count > 1:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        text = f"–ù–∞ {yoga_class['name']} –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?"
        buttons = [
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö", callback_data=f"delete_all_{class_id}")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"delete_one_{class_id}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="my_registration")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data.startswith("delete_all_"))
async def delete_all_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    class_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    classes = db.get_yoga_classes()
    yoga_class = next((c for c in classes if c['id'] == class_id), None)

    db.delete_user_registration(user_id, class_id, all_participants=True)
    text = f"–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ {yoga_class['name']} —É–¥–∞–ª–µ–Ω—ã."
    main_keyboard = get_main_keyboard(check_admin(callback.from_user))
    await callback.message.edit_text(text, reply_markup=main_keyboard)


@dp.callback_query(F.data.startswith("delete_one_"))
async def delete_one_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    class_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    classes = db.get_yoga_classes()
    yoga_class = next((c for c in classes if c['id'] == class_id), None)

    db.delete_user_registration(user_id, class_id, all_participants=False)
    text = f"–û–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ {yoga_class['name']}."
    main_keyboard = get_main_keyboard(check_admin(callback.from_user))
    await callback.message.edit_text(text, reply_markup=main_keyboard)


# –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò

@dp.callback_query(F.data == "admin_view_registrations")
async def admin_view_registrations(callback: CallbackQuery):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not check_admin(callback.from_user):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    registrations = db.get_all_registrations()

    if not registrations:
        text = "–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç."
    else:
        text = "–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
        current_class = None

        for reg in registrations:
            if current_class != reg['class_name']:
                current_class = reg['class_name']
                text += f"üóì {current_class}:\n"

            try:
                user = await bot.get_chat(reg['user_id'])
                name = user.first_name or f"ID{reg['user_id']}"
                if (user.username != None):
                    name += f" @{user.username}"
                if reg['participant_count'] > 1:
                    name += f" +{reg['participant_count'] - 1}"
                text += f"  ‚Ä¢ {name}\n"
            except:
                text += f"  ‚Ä¢ ID{reg['user_id']} ({reg['participant_count']} —á–µ–ª.)\n"
        text += "\n"

    main_keyboard = get_main_keyboard(check_admin(callback.from_user))
    await callback.message.edit_text(text, reply_markup=main_keyboard)


@dp.callback_query(F.data == "admin_manage_schedule")
async def admin_manage_schedule(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not check_admin(callback.from_user):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    text = "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"

    classes = db.get_yoga_classes()
    if not classes:
        text = f"{text}\n–°–µ–π—á–∞—Å –Ω–µ—Ç—É –Ω–µ –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è..."
    for yoga_class in classes:
        total_registered = db.get_total_participants(yoga_class['id'])
        available = yoga_class['max_participants'] - total_registered
        text = f"{text}\n{yoga_class['name']} (—Å–≤–æ–±–æ–¥–Ω–æ: {available})"

    keyboard = get_admin_schedule_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "admin_add_class")
async def admin_add_class(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"""
    if not check_admin(callback.from_user):
        return

    await state.set_state(AdminStates.waiting_class_name)
    text = "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ?"
    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "cancel_creation")
async def cancel_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"""
    await state.clear()
    keyboard = get_admin_schedule_keyboard()
    text = "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.message(StateFilter(AdminStates.waiting_class_name))
async def process_class_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    if not message.text or message.text.strip() == "":
        text = "–û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"
        buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
        return

    await state.update_data(class_name=message.text.strip())
    await state.set_state(AdminStates.waiting_class_capacity)

    text = "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:"
    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard)


@dp.message(StateFilter(AdminStates.waiting_class_capacity))
async def process_class_capacity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç"""
    try:
        capacity = int(message.text)
        if capacity <= 0:
            raise ValueError()
    except (ValueError, TypeError):
        text = "–û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–Ω—è—Ç–∏—è"
        buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
        return

    data = await state.get_data()
    class_name = data['class_name']

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
    class_id = db.add_yoga_class(class_name, capacity)

    await state.clear()

    text = f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞–Ω—è—Ç–∏–µ {class_name} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç {capacity}."
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ", callback_data="admin_add_class")],
        [InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_manage_schedule")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard)


@dp.callback_query(F.data == "admin_delete_class")
async def admin_delete_class(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"""
    if not check_admin(callback.from_user):
        return

    classes = db.get_yoga_classes()

    if not classes:
        text = "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        keyboard = get_admin_schedule_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        return

    text = "–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?"
    buttons = []
    for yoga_class in classes:
        buttons.append([InlineKeyboardButton(text=yoga_class['name'], callback_data=f"confirm_delete_{yoga_class['id']}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "admin_delete_class")
async def admin_delete_class(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"""
    if not check_admin(callback.from_user):
        return

    classes = db.get_yoga_classes()

    if not classes:
        text = "–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        keyboard = get_admin_schedule_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
        return

    text = "–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?"
    buttons = []
    for yoga_class in classes:
        buttons.append([InlineKeyboardButton(text=yoga_class['name'], callback_data=f"confirm_delete_{yoga_class['id']}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_class(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"""
    class_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
    classes = db.get_yoga_classes()
    yoga_class = next((c for c in classes if c['id'] == class_id), None)

    if not yoga_class:
        await callback.answer("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ
    registered_users = db.get_registered_users_for_class(class_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ
    for user_id in registered_users:
        try:
            text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞–Ω—è—Ç–∏–µ {yoga_class['name']} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è..."
            buttons = [[InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(user_id, text, reply_markup=keyboard)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

    # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.delete_yoga_class(class_id)

    text = f"–ó–∞–Ω—è—Ç–∏–µ {yoga_class['name']} —É–¥–∞–ª–µ–Ω–æ. –£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
    keyboard = get_admin_schedule_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "admin_delete_schedule")
async def admin_delete_schedule(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    if not check_admin(callback.from_user):
        return

    text = "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete_all")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="admin_manage_schedule")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "confirm_delete_all")
async def confirm_delete_all_schedule(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    all_users = db.get_all_registered_users()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in all_users:
        try:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è..."
            buttons = [[InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(user_id, text, reply_markup=keyboard)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –∏ –∑–∞–ø–∏—Å–∏
    db.clear_all_classes()

    text = "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
    keyboard = get_admin_schedule_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not check_admin(callback.from_user):
        return

    await state.set_state(AdminStates.waiting_broadcast_message)
    text = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤:"
    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    await state.clear()
    keyboard = get_admin_schedule_keyboard()
    text = "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "admin_edit_description")
async def admin_edit_description(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    if not check_admin(callback.from_user):
        return

    current_description = db.get_start_description()

    await state.set_state(AdminStates.waiting_start_description)
    text = f"–¢–µ–∫—É—â–µ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n{current_description}\n\n–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ? –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É."
    buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_description_edit")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query(F.data == "cancel_description_edit")
async def cancel_description_edit(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.clear()
    keyboard = get_admin_schedule_keyboard()
    text = "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await callback.message.edit_text(text, reply_markup=keyboard)


@dp.message(StateFilter(AdminStates.waiting_start_description))
async def process_start_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not message.text or message.text.strip() == "":
        text = "–û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_description_edit")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
        return

    new_description = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.set_start_description(new_description)

    await state.clear()

    text = "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
    keyboard = get_admin_schedule_keyboard()
    await message.answer(text, reply_markup=keyboard)


@dp.message(StateFilter(AdminStates.waiting_broadcast_message))
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏
    all_users = db.get_all_registered_users()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º
    sent_count = 0
    for user_id in all_users:
        try:
            await bot.send_message(user_id, broadcast_text)
            sent_count += 1
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

    await state.clear()

    text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
    keyboard = get_admin_schedule_keyboard()
    await message.answer(text, reply_markup=keyboard)


@dp.message()
async def handle_message(message: types.Message):
    if message.text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "hi", "hello", "hey", "meraba", "merhaba", "bonjourno"]:
        await message.answer("–ü—Ä–∏–≤–µ—Ç!")
    else:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    if message.text == "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        keyboard = get_schedule_keyboard()
        if keyboard:
            text = "–ù–∞ –∫–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n<b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>"
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è..."
            main_keyboard = get_main_keyboard(check_admin(message.from_user))
            await message.answer(text, reply_markup=main_keyboard)
    elif message.text == "üï∞ –ú–æ—è –∑–∞–ø–∏—Å—å":
        keyboard = get_my_registrations_keyboard(message.from_user.id)
        if keyboard:
            text = "–°–µ–π—á–∞—Å –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:"
            await message.answer(text, reply_markup=keyboard)
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
            main_keyboard = get_main_keyboard(check_admin(message.from_user))
            await message.answer(text, reply_markup=main_keyboard)
    elif message.text == "üåê –û —É—á–∏—Ç–µ–ª–µ":
        await message.answer("https://maps.app.goo.gl/n3HqftvSwE9huSCT9?g_st=it")
    else:
        return


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
